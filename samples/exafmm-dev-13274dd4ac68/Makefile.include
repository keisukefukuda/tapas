# Makefile for ExaFMM example for Tapas library
# This Makefile is written 

.SUFFIXES: .cxx .cu .o

### choose kernel
EQUATION = Laplace
#EQUATION = Yukawa (not available yet)
#EQUATION = Helmholtz (not available yet)
#EQUATION = Stokes (not available yet)

### choose basis of multipole/local expansion
#BASIS	= Cartesian
BASIS	= Spherical
#BASIS	= Planewave (not available yet)

### choose device to use
# For original ExaFMM (not for Tapas)
DEVICE	= CPU
#DEVICE	= GPU (not integrated)

CXX ?= clang++
MPICXX ?= mpicxx -cxx=$(CXX) # mpich's mpicxx

CXX_VER=$(shell $(CXX) --version)

ifneq (,$(findstring LLVM,$(CXX_VER)))
	CXX    += -std=c++11 -Wall -Wextra -O2 -funroll-loops -fcolor-diagnostics -Wno-unused-function
	MPICXX += -std=c++11 -Wall -Wextra -O2 -funroll-loops -fcolor-diagnostics -Wno-unused-function
else ifneq (,$(findstring g++,$(CXX)))
	GCC_INLINE=-finline-functions --param max-inline-insns-recursive=2000 --param max-inline-recursive-depth=10 --param max-inline-insns-single=1000
  GCC_WARNING=-pedantic -Wall -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self \
              -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual \
              -Wredundant-decls -Wshadow -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef \
              -Wno-unused -Wno-unused-function # -Wsign-conversion
	# Mark MPI headers as system
	GCC_SYSTEM := $(shell $(MPICXX) -show | grep -oE "[-]I(\S)+" | sed -e 's/-I//g')
	CXX    += -std=c++11 -Wall -Wextra -funroll-loops -fdiagnostics-color=auto -Wno-unused-function -fno-openmp $(GCC_INLINE) #$(GCC_WARNING) -isystem $(GCC_SYSTEM)
	MPICXX += -std=c++11 -Wall -Wextra -funroll-loops -fdiagnostics-color=auto -Wno-unused-function -fno-openmp $(GCC_INLINE) #$(GCC_WARNING) -isystem $(GCC_SYSTEM)
else ifneq (,$(findstring icpc,$(CXX)))
	# for ICC, we don't use -static option (as well as -fast which implicitly includes it) because it causes a linking error.
	INTEL_INLINE=-no-inline-max-per-routine -no-inline-max-per-compile -inline-max-total-size=3000
	CXX    += -std=c++11 -Wall -Wextra -funroll-loops -xHOST -O3 -no-prec-div -fp-model fast=2 $(INTEL_INLINE)
	MPICXX += -std=c++11 -Wall -Wextra -funroll-loops -xHOST -O3 -no-prec-div -fp-model fast=2 $(INTEL_INLINE)
	#CXX    += -std=c++11 -Wall -Wextra -funroll-loops -g -O2 -no-prec-div -g -lrt 
	#MPICXX += -std=c++11 -Wall -Wextra -funroll-loops -g -O2 -no-prec-div -g -lrt 
endif

# Profiling flags (gprof)
ifneq (,$(ENABLE_PROFILING))
	CXX += -pg -g
	MPICXX += -pg -g
endif

ifneq (,$(ENABLE_SCOREP))
  CXX += -DUSE_SCOREP
  MPICXX += -DUSE_SCOREP
endif

ifneq (,$(TAPAS_ONESIDE_LET))
	CXX += -DTAPAS_ONESIDE_LET
	MPICXX += -DTAPAS_ONESIDE_LET
endif

ifneq (0,$(WEIGHT))
	CXX += -DTAPAS_USE_WEIGHT
	MPICXX += -DTAPAS_USE_WEIGHT
endif

### choose C++ compiler
#CXX	= mpicxx -ggdb3 -Wall -Wextra -O3 -msse4a -ffast-math -funroll-loops -fopenmp -std=c++11 # GCC
#CXX	= CC -Wall -xHOST -O3 -funroll-loops -finline-functions -ansi-alias -openmp # Intel
#CXX	= icpc -Wall -mmic -O3 -L/opt/intel/tbb/lib/mic -lpthread # Intel MIC
#CXX	= mpic++ -Wall -mmic -O3 -L/opt/apps/intel/13/composer_xe_2013.2.146/tbb/lib/mic # Stampede
#CXX	= mpixlcxx_r -qarch=qp -qtune=qp -O3 -qhot -qsuppress=1500-036:1540-0198:1540-0541:1540-1103 # BG/Q
#CXX	= mpixlcxx_r -qarch=450d -qtune=450 -O3 -qsuppress=1500-036:1540-0198:1540-0541:1540-1103 # BG/P
#CXX	= mpiFCCpx -Kfast # K computer
#CXX	= tau_cxx.sh # TAU compiler instrumentation

### choose fortran compiler
FC = mpif90 -ggdb3 -O3 -msse4a -ffast-math -funroll-loops -cpp # gfortran
#FC = mpif90 -Wall -xHOST -O3 -funroll-loops -finline-functions -ansi-alias -cpp # Intel

EXPANSION ?= 10
### Base flags
LFLAGS += -I../include -I../../../cpp/include -I$(HOME)/local/include
#CXX	+= -I$$(echo $$CPATH | sed 's/:/ -I/g') # BG compilers need this
#LFLAGS	+= -L$$(echo $$LIBRARY_PATH | sed 's/:/ -L/g') # BG compilers need this
LFLAGS += -D$(BASIS) # Specify basis of multipole/local expansion
LFLAGS += -DEXPANSION=$(EXPANSION)  # Specify expansion order
# SIMD causes compilation errors on umekoji
#LFLAGS	+= -DUSE_SIMD # Use SSE/AVX/MIC intrinsics
#LFLAGS	+= -DUSE_WEIGHT # Use weights for partitioning
LFLAGS += -DFP64 # Use double precision
#LFLAGS	+= -DKAHAN # Use Kahan summation

### Debugging flags
# LFLAGS += -DCOUNT # Count number calls to P2P and M2L (slows down execution)

### Thread model flags
ifneq (,$(MTHREAD))
	LFLAGS	+= -DMTHREAD -lmyth-native -I$(MYTH_DIR)/include -L$(MYTH_DIR)/lib # MassiveThreads is available from http://github.com/massivethreads/massivethreads
endif

ifneq (,$(TBB))
	ifneq (,$(findstring icpc, $(CXX)))
		CXX += -tbb  -DTBB # for ICC, we don't use -static option (as well as -fast which implicitly includes it) because it causes a linking error.
		MPICXX += -tbb -DTBB
	else
		LFLAGS	+= -DTBB -DTO_TBB -I$(TBB_DIR)/include -L$(TBB_DIR)/lib/intel64/gcc4.4/ -L$(TBB_DIR)/build/*_release/ -ltbb
	endif
endif
#LFLAGS	+= -DCILK -lcilkrts # Cilk is included in the Intel C/C++ Compiler
#LFLAGS	+= -DTBB -ltbb # TBB is available from http://threadingbuildingblocks.org/download.php
#LFLAGS	+= -lmyth-native -L$(HOME)/local/lib # MassiveThreads is available from http://code.google.com/p/massivethreads/
#LFLAGS	+= -DQTHREAD -lqthread # Qthread is available from https://code.google.com/p/qthreads/
#LFLAGS	+= -DOPENMP # OpenMP is included in most modern compilers

### DAG Recorder flags : DAG Recorder is part of MassiveThreads available from http://code.google.com/p/massivethreads/
#LFLAGS	+= -DDAG_RECORDER=2 -ldr

### PAPI flags : set environment value to (export EXAFMM_PAPI_EVENTS="PAPI_L2_DCM,PAPI_L2_DCA,PAPI_TLB_DM") or something else
#LFLAGS	+= -DPAPI -lpapi

#MPICXX += -DTAPAS_DEBUG_COMM_MATRIX

### Trace flags : This tracing tool is part of ExaFMM
#LFLAGS	+= -DTRACE

### VTK flags : VTK is available from http://www.vtk.org/VTK/resources/software.html
#LFLAGS	+= -DVTK -lvtkCharts -lvtkRendering -lvtkGraphics -lvtkFiltering -lvtkViews -lvtkCommon -lvtkWidgets -lvtkIO

ifeq ($(DEVICE),GPU)
NVCC	= nvcc -use_fast_math -arch=sm_35 -I../include
### CUDA flags
LFLAGS  += -lcudadevrt
SOURCES	= ../kernels/$(EQUATION)$(BASIS)$(DEVICE).cu ../kernels/$(EQUATION)P2P$(DEVICE).cu
OBJECTS	= $(SOURCES:.cu=.o)
else
SOURCES	= ../kernels/$(EQUATION)$(BASIS)$(DEVICE).cxx ../kernels/$(EQUATION)P2P$(DEVICE).cxx
OBJECTS	= $(SOURCES:.cxx=.o)
endif

MAKEFLAGS += --no-print-directory

.c.o	:
	$(CXX) -c $< -o $@ $(LFLAGS)
.cxx.o  :
	$(CXX) -c $< -o $@ $(LFLAGS)
.cu.o   :
	$(NVCC) -c $< -o $@ $(LFLAGS)

help:
	@make -C .. help
clean:
	@make -C .. clean
cleandat:
	@make -C .. cleandat
cleanlib:
	@make -C .. cleanlib
cleanall:
	@make -C .. cleanall
commit:
	@make -C .. commit
save:
	@make -C .. save
revert:
	@make -C .. revert
